---for install the docker 
sudo apt install docker.io

---to check the status of docker
    sudo systemctl status docker

---to start the docker container
  sudo systemctl enable --now docker
  
---check that the docker is running or not and puller the hello-world image from docker hub
  sudo docker run hello-world
  
---This command will show all the images that are present locally on your ubantu operatind system
  sudo docker images
  
---To pull the images of the software
    sudo docker pull mysql 
 # as same as we can pull the images of every available software in docker hub.

---Docker desktop installation command
    sudo dpkg -i ./docker-desktop-4.16.2-amd64.deb
    
---To check the present images. You will also get the image id 
    Docker image ls

---To run the specific image
    Docker run imageid_upto_4digits
    
---#showing the container is up and running.
    Docker ps 
    
---Showing all the container creation status.
    Docker ps -a
    
---Docker mongo db image port mapping
    docker run -p 27017:8080 imageId_4digits
    
--- Docker nginx imager port mapping
    docker run -p 9000:8081 imageId_4digits
    
--- Remove the container after use
    docker rm containerId_4digits
    
--- Remove all the docker container#This will remove the container and give the container id.
    Docker rm $(docker ps -a -q)
    
--- We can create the 3 container of same image with different container id.

--- docker ps -a -q # by this command will get the container id of all the container.

--- To remove the image
    docker rmi imageId_first_4_digits
   
--- To stop the container
    docker stop container_id_first_4_latter

---Force remove the running container
    docker rm -f container_id_4digits

--->Port mapping<----

--- Port mapping of nginx server #by default port is 8080
    docker run -p 9000:8080 bitnami/nginx
    #default port is 8080 as per documentation and 9000 is custom port that we can change.
    
--- rename the container name and do the port mapping.
    docker run --name nginx -p 8080:8080 bitnami/nginx
   
--- Run the container by detached mode so it will be running on background if i closed the terminal.
    docker run --name nginx2 -p 8080 -d bitnami/nginx
    docker run -d nginx

--- Forcefully remove the image.
    docker rmi -f image_id 4digits
    
---Showing all the image_id
    docker image ls -q
   
---Removing all the images.
    docker rmi $(docker image ls -q)
   
---To create the docker file.
    touch Dockerfile
    
---Inside the docker file we will write the dependecy and configuration.
    FROM python:3-alpine #because app working on python3 
    WORKDIR /service
    COPY requirements.txt
    RUN pip install -r requirements.txt
    COPY . ./ #(.) copy all the thing to current working directory ,(./) to docker directory
    EXPOSE 8082
    ENTRYPOINT ["python3", "app.py"] #python3 is the requirement for working directory.App.py is the entry point.
    
--- If we want that some file should be ignore then we need to create the file which is.
    touch .dockerignore
    '''inside the dockerignore file we will write all the ignore folders or file.
    like - venv'''
   
---To convert the dockerfile to docker image we have to build it.
    docker build -t Image_name_anything_you_want:latest .
 
---To run the app image 
    docker run -p 8082:8070 hellopython #by default port i 8070 and custom port is 8082.
    
---To create the network between 2 containers
    docker network create todo-app

---Volume mounting inside the docker container.
    https://www.geeksforgeeks.org/mounting-a-volume-inside-docker-container/
    
--- Volume mounting between 2 containers

docker run -d `
>>network todo-app --network-alias mysql `
>> -v todo-mysql-data:/var/lib/mysql `
>> -e MYSQL_ROOT_PASSWORD=secret `
>> -e MYSQL_DATABASE=todos `
>> mysql:8.0

-- Execute the mysql database.
>> docker exec -it 8f93 mysql -u root -p

--
    docker run -it --network todo-app nicolaka/netshoot

    
